
MetaMsgId : unsigned int

MetaActorId : unsigned int

Handler : Function(Msg): Msg 

--------------------------------------------------------------------------------

MetaMsg

  ATTRIBUTES
    + id: MetaMsgId = 0
    + name: string = ""
    + paramsSize: int = 0
    + registred: bool = false
    + lock: mutex = unloked

  OPERATIONS
    + register(): bool

--------------------------------------------------------------------------------

MetaHandler

  ATTRIBUTES
    + metaMsg: MetaMsg
    + handler: Handler

  OPERATIONS
    - ...

--------------------------------------------------------------------------------

MetaActor

  ATTRIBUTES
    + id: MetaActorId = 0
    + name: string = ""
    + registred: bool = false
    + lock: mutex = unloked
    + handlers: List<MetaHandler>

  OPERATIONS
    + register(): bool

--------------------------------------------------------------------------------

Msg

  ATTRIBUTES
    - meta: MetaMsg
    - from: Actor
    - to: Actor
    - params: void *
    - paramsSize: unsigned int

  OPERATIONS
    + create(from, to, meta, params, paramSize): Msg
    + destroy(): void

--------------------------------------------------------------------------------

Actor

  ATTRIBUTES
    - id: ActorId
    - meta: MetaActor
    - acceptMessages: bool = true
    - done: bool = false
    - children: Array<Actor>
    - msgs: Queue<Actor>
    - handlers: Map<MetaMsgId, Handler>

  OPERATIONS
    - onCreate(Msg): Msg
    - onTerminate(Msg): Msg
    - onTerminated(Msg): Msg
    - onDestroy(Msg): Msg
    - loop(): int

    + create(MetaActor, params, paramsSize): Actor

    + destroy()

--------------------------------------------------------------------------------

Actor::loop(): int

  Enquanto (!done)
    msg = msgs.get()
    Para cada handler em handlers[msg.id] fa√ßa
      handler(msg)
    FimPara
    Destroi msg
  FimEnquanto

--------------------------------------------------------------------------------

Actor::crete(MetaActor, params, paramsSize)

  actorInfo.register()

  actor = new Actor
  actor.id = children.add(actor)
  actor.handlers[onCreate.id] = Actor::onCreate
  actor.handlers[onTerminate.id] = Actor::onTerminate
  actor.handlers[onTerminated.id] = Actor::onTerminated
  actor.handlers[onDestroy.id] = Actor::onDestroy

    send(actor, &Create, params, paramsSize)

    + destroy()

--------------------------------------------------------------------------------

ACTOR::SEND(actor, MetaMsg, params, paramsSize)

  msg = new Msg(this, msgMsg, params, paramsSize)
  actor.msgs.add(this, msg)

--------------------------------------------------------------------------------

ACTORINFO::REGISTER


--------------------------------------------------------------------------------

ACTOR::ONTERMINATE

  Marca o ator pra recursar mensagens.
  Marca o ator pra ser finalizado.
  Se ator tiver filhos
     Ator envia mensagem Terminate pra cada um.
  FimSe

--------------------------------------------------------------------------------

USE CASE 1

  Ping = MetaMsg::create("Ping", 0)

  Pinger = MetaActor::create("Pinger", sizeof(PingerContext))
  Pinger.route(Ping, Pinger::onPing)

  Actor pinger = SystemActor::create(&Pinger, params, sizeof(params))

  pinger.send(&Ping)

--------------------------------------------------------------------------------

USE CASE 2

  Actor pinger = SystemActor::create(&Pinger, params, sizeof(params))

  pinger.send(&Ping)
